import json
import base64
import logging
import tempfile
import requests

from odoo import models, fields

_logger = logging.getLogger(__name__)


class CrmLead(models.Model):
    _inherit = "crm.lead"

    _sql_constraints = [
        ("unique_ads_lead_id", "unique(ads_lead_id)", "The Ads Lead ID must be unique.")
    ]

    ads_source = fields.Selection(
        selection=[
            ("google", "Google Ads"),
            ("facebook", "Facebook Ads"),
            ("other", "Other"),
        ],
        string="Ads Source",
        help="The source of the advertisement that generated the lead."
    )

    ads_lead_id = fields.Char(
        string="Ads Lead ID",
        help="The unique ID of the lead generated by the advertisement."
    )

    def create_lead_from_ads(self, vals):
        """Create a lead from an advertisement and attach JSON data to chatter."""

        lead, is_lead = None, False

        if vals.get("lead_id") and vals.get("user_column_data"):
            lead, lead_data = self._create_lead_google_ads(vals)
            is_lead = True
        elif vals.get("entry") and vals.get("object"):
            lead, lead_data = self._create_lead_facebook_ads(vals)
            is_lead = True

        if lead:
            self._attach_json_to_chatter(lead, lead_data)

        return is_lead or vals.get('hub.challenge')

    def _create_lead_google_ads(self, vals):
        """Process Google Ads lead data and create a lead."""

        items = {rec.get("column_id").lower(): rec.get("string_value") for rec in vals.get("user_column_data", [])}

        lead_data = self._prepare_lead_data(items, "google", vals.get("lead_id"))
        lead = self.env["crm.lead"].create(lead_data)
        _logger.info("Created 1 lead from Google Ads.".center(80, "-"))

        return [lead], vals

    def _create_lead_facebook_ads(self, vals):
        """Process Facebook Ads lead data and create leads."""

        access_token = self.env["ir.config_parameter"].get_param("facebook_meta_access_token")
        if not access_token:
            _logger.warning("Facebook Meta Access Token is missing.".center(80, "-"))
            return [], {}

        leads, leads_data = [], []

        for lead_id in self._extract_facebook_leads(vals):
            data = self._extract_facebook_json(lead_id, access_token)

            if not data or data.get("error"):
                _logger.error("Error fetching lead data from Facebook: %s", data.get('error', 'Unknown error'))
                continue

            items = {record.get("name").lower(): " ".join(record.get("values", [])).strip() for record in data.get("field_data", [])}

            lead_data = self._prepare_lead_data(items, "facebook", lead_id)
            leads.append(self.env["crm.lead"].create(lead_data))
            leads_data.append(data)

        _logger.info("Created %s leads from Facebook Ads.".center(80, "-"), str(len(leads)))
        vals["main_payload"] = leads_data
        return leads, vals

    def _prepare_lead_data(self, items, ads_source, lead_id=None):
        """Prepare lead data dictionary for creation."""

        lead_name = items.get("full_name") or f"{items.get('first_name', '')} {items.get('last_name', '')}"
        return {
            "name": f"{lead_name}' Opportunity",
            "email_from": items.get("email") or items.get("work_email"),
            "phone": items.get("phone_number"),
            "partner_name": items.get("company_name"),
            "contact_name": lead_name,
            "function": items.get("job_title"),
            "mobile": items.get("work_phone") or items.get("work_phone_number"),
            "street": items.get("street_address"),
            "city": items.get("city"),
            "state_id": self._get_state_id(items.get("state") or items.get("region")),
            "zip": items.get("post_code") or items.get("postal_code"),
            "country_id": self._get_country_id(items.get("country")),
            "ads_source": ads_source,
            "ads_lead_id": lead_id or items.get("lead_id"),
        }

    def _attach_json_to_chatter(self, leads, lead_data):
        """Save lead data to a JSON file and attach it to the chatter."""

        json_data = json.dumps(lead_data, indent=4)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".json") as temp_file:
            temp_file.write(json_data.encode("utf-8"))
            temp_file_path = temp_file.name

        with open(temp_file_path, "rb") as file:
            encoded_file = base64.b64encode(file.read()).decode("utf-8")

        for lead in leads:
            attachment = self.env["ir.attachment"].create({
                "name": f"{lead.name}_lead.json",
                "datas": encoded_file,
                "res_model": "crm.lead",
                "res_id": lead.id,
                "type": "binary",
            })
            lead.message_post(body="Lead data from ads integration", attachment_ids=[attachment.id])

    def _extract_facebook_leads(self, vals):
        """Extract lead IDs from Facebook Ads data."""

        try:
            return [change["value"]["leadgen_id"] for entry in vals.get("entry", []) for change in entry.get("changes", [])]
        except KeyError:
            return []

    def _extract_facebook_json(self, lead_id, access_token):
        """Extract lead data from Facebook API."""

        try:
            response = requests.get(f"https://graph.facebook.com/{lead_id}/?access_token={access_token}")
            return response.json()
        except requests.RequestException as e:
            _logger.error("Failed to fetch Facebook lead data: %s", str(e))
            return {}

    def _get_state_id(self, state_name):
        """Retrieve the state ID based on its name."""
        return self.env["res.country.state"].search([("name", "=", state_name)], limit=1).id or False

    def _get_country_id(self, country_name):
        """Retrieve the country ID based on its name."""
        return self.env["res.country"].search([("name", "=", country_name)], limit=1).id or False
