from datetime import timedelta

from odoo import api, fields, models
from odoo.exceptions import UserError

class EstatePropertyOffer(models.Model):
    _name = "estate.property.offer"
    _description = "offers available to property"
    _order = "price desc"

    price = fields.Float("Price")
    status = fields.Selection(
        string="Status",
        copy=False,
        selection=[("accepted", "Accepted"), ("refused", "Refused")],
    )
    partner_id = fields.Many2one("res.partner", required=True)
    property_id = fields.Many2one("estate.property", required=True, ondelete="cascade")
    validity = fields.Integer("Validity (days)", default=7)
    date_deadline = fields.Date(
        "Deadline Date",
        compute="_compute_date_deadline",
        inverse="_inverse_date_deadline",
    )
    property_type_id = fields.Many2one(
        related="property_id.property_type_id", store=True
    )

    @api.depends("validity", "property_id.create_date")  # create_date is a automatic field generated by ORM with 4 other fields
    def _compute_date_deadline(self):
        for record in self:
            createDate = (
                record.property_id.create_date.date()
                if record.property_id and record.property_id.create_date
                else fields.Date.today()
            )
            record.date_deadline = createDate + timedelta(days=record.validity)

    # inverse function works when whole form is saved, the UI won't be updated until record is saved
    def _inverse_date_deadline(self):
        for record in self:
            record.validity = (
                (record.date_deadline - record.property_id.create_date.date()).days
                if record.date_deadline
                else 0
            )

    _sql_constraints = [
        (
            "check_positive_price",
            "CHECK(price > 0)",
            "Price of Offer must be Strictly positive",
        )
    ]

    @api.model_create_multi
    def create(self, vals_list):
        for vals in vals_list:
            property = self.env["estate.property"].browse(vals["property_id"])
            # checks if property is already sold such that new offers cannot be created
            if property.state == "sold":
                raise UserError("Sold Property cannot receive more offers")
            property.state = "offer_received"

            '''
            # Heavy computation code for large number of offers in single property
            for offer in property.offer_ids:
                if offer.price > vals["price"]:
                    raise UserError("The offer must be higher than the existing offer")
            '''
            # better approach
            if (self.property_id.offer_ids): # check if there are offers in property
                max_price = max(property_id.offer_ids.mapped('price')) # create a dict of property_id with their prices and return max value of it
                if vals["price"] < max_price:
                    raise UserError("The offer must be higher than the existing offer")
        return super().create(vals_list)

    def action_set_status_accepted(self):
        for record in self:
            # check if already accepted another offer
            if record.property_id.buyer_id:
                message = "One Property has already accepted an offer."
                raise UserError(message)
            else:
                record.status = "accepted"
                record.property_id.buyer_id = record.partner_id
                record.property_id.selling_price = record.price
                record.property_id.state = "offer_accepted"
        return True

    def action_set_status_refused(self):
        for record in self:
            if record.status == "accepted":
                record.property_id.buyer_id = False
                rd.property_id.selling_price = False
            self.status = "refused"
        return True
